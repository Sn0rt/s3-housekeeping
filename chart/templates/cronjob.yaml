{{- range $index, $bucket := .Values.s3.buckets }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $bucket.name | replace "_" "-" | replace "." "-" | lower }}-{{ $.Release.Namespace }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "s3-housekeeping.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ $bucket.name | replace "_" "-" | replace "." "-" | lower }}
    s3-housekeeping.io/bucket: {{ $bucket.name | quote }}
spec:
  schedule: "{{ $.Values.cronJob.schedule }}"
  concurrencyPolicy: {{ $.Values.cronJob.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ $.Values.cronJob.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ $.Values.cronJob.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "s3-housekeeping.selectorLabels" $ | nindent 12 }}
            app.kubernetes.io/component: {{ $bucket.name | replace "_" "-" | replace "." "-" | lower }}
            s3-housekeeping.io/bucket: {{ $bucket.name | quote }}
        spec:
          restartPolicy: {{ $.Values.cronJob.restartPolicy }}
          {{- if $.Values.multiBucket }}
          initContainers:
          - name: multi-cluster-delay
            image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
            imagePullPolicy: {{ $.Values.image.pullPolicy }}
            command:
            - /bin/bash
            - -c
            - |
              echo "Checking required tools..."
              if ! command -v python3 &> /dev/null; then
                echo "Error: python3 not found"
                exit 1
              fi
              if ! command -v pip3 &> /dev/null; then
                echo "Error: pip3 not found"
                exit 1
              fi
              echo "Required tools check passed"

              echo "Multi-cluster deployment detected, applying random delay to avoid conflicts..."
              # Generate random delay between 5-50 seconds
              delay=$((5 + RANDOM % 46))
              echo "Applying random delay: ${delay} seconds (range: 5-50s)"
              echo "Bucket: {{ $bucket.name }}"
              echo "Start time: $(date)"
              sleep ${delay}
              echo "Delay completed at: $(date)"
              echo "Proceeding to main container..."
            resources:
              limits:
                cpu: 50m
                memory: 64Mi
              requests:
                cpu: 25m
                memory: 32Mi
          {{- end }}
          containers:
          - name: s3-housekeeping
            image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
            imagePullPolicy: {{ $.Values.image.pullPolicy }}
            command:
            - /bin/bash
            - -c
            - |
              # Install boto3 if not present
              if ! python3 -c "import boto3" 2>/dev/null; then
                echo "Installing boto3..."
                pip3 install boto3
              fi

              # Execute Python lifecycle manager
              python3 /scripts/s3_lifecycle_manager.py apply "{{ $bucket.name }}" "/lifecycle-configs/{{ $bucket.lifecycleConfigName }}.json"
            env:
            # Static configuration (always from values)
            - name: S3_BUCKET_NAME
              value: {{ $bucket.name | quote }}
            - name: S3_ENDPOINT
              value: {{ $bucket.endpoint | quote }}
            - name: S3_CA_BUNDLE
              value: {{ $bucket.caBundle | default "" | quote }}
            - name: DEBUG
              value: {{ $.Values.debug | default false | quote }}
            - name: AWS_DEFAULT_REGION
              value: {{ $.Values.s3.region | default "" | quote }}
            - name: AWS_VERIFY_SSL
              value: {{ $.Values.s3.verifySSL | default false | quote }}

            # AWS credentials (per-bucket, from Secret)
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.accessKeyId.secretName | quote }}
                  key: {{ $bucket.accessKeyId.secretKey | quote }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.secretAccessKey.secretName | quote }}
                  key: {{ $bucket.secretAccessKey.secretKey | quote }}

            # Additional environment variables (if any)
            {{- range $envName, $envConfig := $.Values.envs }}
            {{- if not (has $envName (list "ACTIVE_CLUSTER" "CURRENT_CLUSTER" "IS_ACTIVE")) }}
            - name: {{ $envName }}
              {{- if kindOf $envConfig | eq "string" }}
              value: {{ $envConfig | quote }}
              {{- else if $envConfig.configMapName }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $envConfig.configMapName | quote }}
                  key: {{ $envConfig.configMapKey | quote }}
              {{- else if $envConfig.secretName }}
              valueFrom:
                secretKeyRef:
                  name: {{ $envConfig.secretName | quote }}
                  key: {{ $envConfig.secretKey | quote }}
              {{- else if $envConfig.value }}
              value: {{ $envConfig.value | quote }}
              {{- end }}
            {{- end }}
            {{- end }}
            volumeMounts:
            - name: script-volume
              mountPath: /scripts
              readOnly: true
            - name: lifecycle-config-volume
              mountPath: /lifecycle-configs
              readOnly: true
            resources:
              {{- toYaml $.Values.resources | nindent 14 }}
          volumes:
          - name: script-volume
            configMap:
              name: {{ include "s3-housekeeping.fullname" $ }}-script
              defaultMode: 0755
          - name: lifecycle-config-volume
            configMap:
              name: {{ include "s3-housekeeping.fullname" $ }}-lifecycle-configs
              defaultMode: 0644
{{- end }}