# E2E Test Values for S3 Housekeeping with MinIO
# This configuration tests the complete lifecycle management functionality

# Enable debug mode for detailed logging
debug: true

# Enable multi-bucket mode to test init container delay logic
multiBucket: true

# Container image configuration
image:
  repository: amazonlinux
  tag: "2023.4.20240319.1"
  pullPolicy: IfNotPresent

# S3 buckets configuration for testing
s3:
  buckets:
    # Test bucket 1 - Standard lifecycle with different credential keys
    - name: "test-bucket-1"
      lifecycleConfigName: "standard-lifecycle"
      endpoint: "http://minio.minio.svc.cluster.local:9000"
      accessKeyId:
        secretName: "minio-credentials-1"
        secretKey: "AWS_ACCESS_KEY_ID"
      secretAccessKey:
        secretName: "minio-credentials-1"
        secretKey: "AWS_SECRET_ACCESS_KEY"

    # Test bucket 2 - Complex lifecycle with different credential keys
    - name: "test-bucket-2"
      lifecycleConfigName: "complex-lifecycle"
      endpoint: "http://minio.minio.svc.cluster.local:9000"
      accessKeyId:
        secretName: "minio-credentials-2"
        secretKey: "ACCESS_KEY"
      secretAccessKey:
        secretName: "minio-credentials-2"
        secretKey: "SECRET_KEY"

    # Test bucket 3 - Minimal lifecycle with different credential keys
    - name: "test-bucket-3"
      lifecycleConfigName: "minimal-lifecycle"
      endpoint: "http://minio.minio.svc.cluster.local:9000"
      accessKeyId:
        secretName: "minio-credentials-3"
        secretKey: "accesskey"
      secretAccessKey:
        secretName: "minio-credentials-3"
        secretKey: "secretkey"

# S3 lifecycle configurations for testing
s3LifecycleConfigs:
  # Standard lifecycle configuration
  - name: "standard-lifecycle"
    content: |
      {
        "Rules": [
          {
            "ID": "StandardRule",
            "Status": "Enabled",
            "Filter": {
              "Prefix": "documents/"
            },
            "Transitions": [
              {
                "Days": 30,
                "StorageClass": "STANDARD_IA"
              },
              {
                "Days": 90,
                "StorageClass": "GLACIER"
              }
            ],
            "Expiration": {
              "Days": 365
            }
          }
        ]
      }

  # Complex lifecycle configuration with multiple rules
  - name: "complex-lifecycle"
    content: |
      {
        "Rules": [
          {
            "ID": "LogsRule",
            "Status": "Enabled",
            "Filter": {
              "Prefix": "logs/"
            },
            "Expiration": {
              "Days": 7
            }
          },
          {
            "ID": "BackupsRule",
            "Status": "Enabled",
            "Filter": {
              "Prefix": "backups/"
            },
            "Transitions": [
              {
                "Days": 1,
                "StorageClass": "STANDARD_IA"
              },
              {
                "Days": 30,
                "StorageClass": "GLACIER"
              }
            ],
            "Expiration": {
              "Days": 2555
            }
          },
          {
            "ID": "TempRule",
            "Status": "Enabled",
            "Filter": {
              "Prefix": "temp/"
            },
            "Expiration": {
              "Days": 1
            }
          }
        ]
      }

  # Minimal lifecycle configuration
  - name: "minimal-lifecycle"
    content: |
      {
        "Rules": [
          {
            "ID": "SimpleRule",
            "Status": "Enabled",
            "Filter": {
              "Prefix": ""
            },
            "Expiration": {
              "Days": 30
            }
          }
        ]
      }

# CronJob scheduling configuration
cronJob:
  # Run every 2 minutes for testing
  schedule: "*/2 * * * *"
  # Number of job history to retain
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  # Concurrency policy: Allow, Forbid, Replace
  concurrencyPolicy: Forbid
  # Job execution timeout in seconds - shorter for testing
  activeDeadlineSeconds: 300
  # Restart policy
  restartPolicy: OnFailure

# Resource limits for testing environment
resources:
  limits:
    cpu: "200m"
    memory: "128Mi"
  requests:
    cpu: "100m"
    memory: "64Mi"